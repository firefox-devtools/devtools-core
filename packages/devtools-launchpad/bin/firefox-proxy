#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

"use strict";

const minimist = require("minimist");
const ws = require("ws");
const net = require("net");

function proxy(host, webSocketPort, tcpPort, logging) {
  console.log(`Listening for WS on localhost:${webSocketPort}, all traffic is proxied to ${host}:${tcpPort}`);
  if (!logging) {
     const style = "background-color:#F9F9FA; color:#E135B2;"
     console.log("Protocol messages can be logged by enabling %clogging.firefoxProxy%c " +
       "in %c/configs/local.json", style, "", style);
  }
  let wsServer = new ws.Server({ port: webSocketPort });
  wsServer.on("connection", function onConnection(wsConnection) {
    let tcpClient = net.connect({ host, port: tcpPort });
    tcpClient.setEncoding("utf8");

    tcpClient.on("connect", () => {
      // console.log("TCP connection succeeded");
    });

    tcpClient.on("error", e => {
      wsConnection.close();
      console.log("TCP connection failed: " + e);
    });

    tcpClient.on("data", data => {
      if (logging) {
        console.log("TCP -> WS: " + data);
      }
      try {
        wsConnection.send(data);
      } catch (e) {
        tcpClient.end();
        console.log("WS send failed, disconnected from TCP");
      }
    });

    wsConnection.on("message", msg => {
      if (logging) {
        console.log("WS -> TCP: " + msg);
      }
      tcpClient.write(msg);
    });

    wsConnection.on("close", () => {
      tcpClient.end();
      console.log("WS connection closed, disconnected from TCP");
    });

    wsConnection.on("error", () => {
      tcpClient.end();
      console.log("WS connection error, disconnected from TCP");
    });
  });
}

const args = minimist(process.argv.slice(2));

const _startDefaultOptions = {
  host: "localhost",
  webSocketPort: 9000,
  tcpPort: 6080,
  logging: false
};

const WEB_SOCKET_PORT = args["web-socket-port"] || _startDefaultOptions.webSocketPort;
const TCP_PORT = args["tcp-port"] || _startDefaultOptions.tcpPort;
const shouldStart = args.start;

function start(options = {}) {
  const _options = Object.assign({}, _startDefaultOptions, options);
  const { webSocketPort, tcpPort, logging, host } = _options;
  proxy(host, webSocketPort, tcpPort, logging);
}

if (shouldStart) {
  start({ webSocketPort: WEB_SOCKET_PORT, tcpPort: TCP_PORT });
} else {
  module.exports = start;
}
